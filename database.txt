
-- Tạo cơ sở dữ liệu
CREATE DATABASE TourManagement;
USE TourManagement;

-- Tạo bảng User
CREATE TABLE User (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    FullName VARCHAR(255) NOT NULL,           
    Email VARCHAR(100),
    PhoneNumber VARCHAR(50),
    Password VARCHAR(255),
    AvatarUrl TEXT,
    IsDeleted Boolean DEFAULT FALSE

);

CREATE TABLE Role (
    RoleID INT PRIMARY KEY AUTO_INCREMENT,
    RoleName  ENUM('Admin', 'Manager') DEFAULT 'Admin'
);

CREATE TABLE User_Role (
    RoleID INT,
    UserID INT,
    PRIMARY KEY (RoleID, UserID),
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE,
    FOREIGN KEY (RoleID) REFERENCES Role(RoleID) ON DELETE CASCADE
);


-- Tạo bảng Tour
CREATE TABLE Tour (
    TourID INT PRIMARY KEY AUTO_INCREMENT,
    TourName VARCHAR(255),
    Duration INT,
    Description TEXT,
    Price DECIMAL(10, 2),
    Img_Tour TEXT,
    IsDeleted Boolean DEFAULT FALSE
);

-- Tạo bảng Schedule
CREATE TABLE Schedule (
    ScheduleID INT PRIMARY KEY AUTO_INCREMENT,
    TourID INT,
    StartDate DATETIME,
    Capacity INT,
    AvailableSpots INT NOT NULL,
    IsDeleted Boolean DEFAULT FALSE,
    Status ENUM('Available', 'Full') DEFAULT 'Available',
    FOREIGN KEY (TourID) REFERENCES Tour(TourID) ON DELETE CASCADE

);

-- Tạo bảng Booking
CREATE TABLE Booking (
    BookingID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    ScheduleID INT,
    BookingDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    NumberOfGuests INT,
    TotalAmount DECIMAL(10, 2),
    Status ENUM('Booked', 'Paid', 'Cancelled', 'Pending') DEFAULT 'Pending',
    IsDeleted Boolean DEFAULT FALSE,
    FOREIGN KEY (UserID) REFERENCES User(UserID),
FOREIGN KEY (ScheduleID) REFERENCES Schedule(ScheduleID)
);

-- Tạo bảng Service
CREATE TABLE Service (
    ServiceID INT PRIMARY KEY AUTO_INCREMENT,
    ServiceName VARCHAR(255),
    Description TEXT,
    Price DECIMAL(10, 2),
    IsDeleted Boolean DEFAULT FALSE
);

-- Tạo bảng Booking_Service
CREATE TABLE Booking_Service (
    BookingID INT,
    ServiceID INT,
    Quantity INT,
    PRIMARY KEY (BookingID, ServiceID),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID),
    FOREIGN KEY (ServiceID) REFERENCES Service(ServiceID)
);

-- Tạo bảng Tour_Service
CREATE TABLE Tour_Service (
    TourID INT,
    ServiceID INT,
    Status ENUM('Available', 'Optional') DEFAULT 'Available',
    IsDeleted Boolean DEFAULT FALSE,
    PRIMARY KEY (TourID, ServiceID),
    FOREIGN KEY (TourID) REFERENCES Tour(TourID) ON DELETE CASCADE,
    FOREIGN KEY (ServiceID) REFERENCES Service(ServiceID)
);

-- Tạo bảng Schedule_TS
CREATE TABLE Schedule_TS (
    TourID INT,
    ServiceID INT,
    ScheduleID INT,
    AvailableSpots INT,
    Capacity INT,
    PRIMARY KEY (TourID, ServiceID, ScheduleID),
    FOREIGN KEY (ScheduleID) REFERENCES Schedule(ScheduleID) ON DELETE CASCADE,
    FOREIGN KEY (TourID) REFERENCES Tour(TourID) ON DELETE CASCADE,
    FOREIGN KEY (ServiceID) REFERENCES Service(ServiceID) ON DELETE CASCADE
);

-- Tạo bảng Feedback
CREATE TABLE Feedback (
    FeedbackID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    TourID INT,
    Rating INT,
    Content TEXT,
    FeedbackDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES User(UserID),
    FOREIGN KEY (TourID) REFERENCES Tour(TourID)
);

-- Tạo bảng Paticipant
CREATE TABLE Participant (
    ParticipantID INT PRIMARY KEY AUTO_INCREMENT, 
    BookingID INT NOT NULL,                      
    FullName VARCHAR(255) NOT NULL,           
    Email VARCHAR(255),         
    PhoneNumber VARCHAR(50),                
    FullNameOnPassport VARCHAR(255) NOT NULL,  
    PassportNumber VARCHAR(100) NOT NULL,        
    DateOfBirth DATE NOT NULL,                 
    Nationality VARCHAR(255),       
    Gender ENUM('Male', 'Female'),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID)
); 

-- Tạo bảng lưu lịch trình của tour
CREATE TABLE Itinerary (
    ItineraryID INT PRIMARY KEY AUTO_INCREMENT,
    TourID INT NOT NULL,
    DayNumber INT NOT NULL,
    Location VARCHAR(255),
    Activities TEXT,
    MealsIncluded VARCHAR(255),
    ImageUrl TEXT,
    IsDeleted BOOLEAN DEFAULT FALSE,
    Description TEXT,
    FOREIGN KEY (TourID) REFERENCES Tour(TourID) ON DELETE CASCADE
);

-- Bảng danh mục
CREATE TABLE Categories (
    CategoryID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL UNIQUE
);

-- Bảng bài viết
CREATE TABLE Posts (
    PostID INT AUTO_INCREMENT PRIMARY KEY,
    AuthorID INT NOT NULL,
    CategoryID INT NOT NULL,
    Views INT DEFAULT 0,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (AuthorID) REFERENCES User(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID) ON DELETE CASCADE
);

-- Bảng nội dung bài viết
CREATE TABLE PostContent (
    ContentID INT AUTO_INCREMENT PRIMARY KEY,
    PostID INT NOT NULL,
    ImageUrl TEXT DEFAULT NULL,
    Title VARCHAR(255) NOT NULL,
    Subtitle VARCHAR(255) DEFAULT NULL,
    ContentIntro TEXT DEFAULT NULL,
    Quote TEXT DEFAULT NULL,
    ContentBody TEXT NOT NULL,
    Link VARCHAR(2055) DEFAULT NULL,
    FOREIGN KEY (PostID) REFERENCES Posts(PostID) ON DELETE CASCADE
);

-- Bảng bình luận
CREATE TABLE Comments (
    CommentID INT AUTO_INCREMENT PRIMARY KEY,
    PostID INT NOT NULL,
    AuthorID INT NOT NULL,
    Content TEXT NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (PostID) REFERENCES Posts(PostID) ON DELETE CASCADE,
    FOREIGN KEY (AuthorID) REFERENCES User(UserID) ON DELETE CASCADE
);

-- Bảng lượt thích bài viết
CREATE TABLE UserLikes (
    LikeID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL,
    PostID INT NOT NULL,
    UNIQUE(UserID, PostID), -- Tránh trùng lặp lượt thích
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE,
    FOREIGN KEY (PostID) REFERENCES Posts(PostID) ON DELETE CASCADE
);

INSERT INTO categories (name) VALUES
('blog'),
('reportage');

INSERT INTO role (RoleName) VALUES
('Admin'),
('Manager');



